name: Deploy Azure Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infrastructure.yml'
  
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infrastructure.yml'
      
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      validate_only:
        description: 'Only validate the template (no deployment)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AZURE_LOCATION: eastus2

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Bicep template
      run: |
        # Use environment-specific parameters for validation (default to dev)
        PARAM_FILE="infra/main.bicepparam"
        if [ -f "infra/main.dev.bicepparam" ]; then
          PARAM_FILE="infra/main.dev.bicepparam"
        fi
        
        az deployment sub validate \
          --template-file infra/main.bicep \
          --parameters $PARAM_FILE \
          --location ${{ env.AZURE_LOCATION }}

  preview:
    name: Preview Changes
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.validate_only == 'true')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: What-if analysis
      id: whatif
      run: |
        # Use environment-specific parameters for what-if (default to dev)
        PARAM_FILE="infra/main.bicepparam"
        if [ -f "infra/main.dev.bicepparam" ]; then
          PARAM_FILE="infra/main.dev.bicepparam"
        fi
        
        echo "## Infrastructure Changes Preview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Parameter file:** $PARAM_FILE" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following changes will be made to the Azure infrastructure:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        whatif_output=$(az deployment sub what-if \
          --template-file infra/main.bicep \
          --parameters $PARAM_FILE \
          --location ${{ env.AZURE_LOCATION }} \
          --no-pretty-print 2>&1 || true)
        
        echo "$whatif_output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Save output for PR comment
        echo "WHATIF_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "$whatif_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = process.env.WHATIF_OUTPUT;
          const comment = `## üèóÔ∏è Infrastructure Changes Preview

          The following changes will be made to the Azure infrastructure:

          <details>
          <summary>What-if Analysis Results</summary>

          \`\`\`
          ${output}
          \`\`\`

          </details>

          > This comment is automatically updated when changes are made to the infrastructure files.`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Infrastructure Changes Preview')
          );

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.validate_only != 'true')
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set environment variables
      run: |
        ENV_NAME="${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}"
        echo "ENVIRONMENT_NAME=azdts-demo-${ENV_NAME}" >> $GITHUB_ENV
        echo "DEPLOYMENT_NAME=azdts-demo-${ENV_NAME}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "PARAM_FILE=infra/main.${ENV_NAME}.bicepparam" >> $GITHUB_ENV

    - name: Deploy infrastructure
      run: |
        echo "Deploying to environment: ${{ env.ENVIRONMENT_NAME }}"
        echo "Using parameter file: ${{ env.PARAM_FILE }}"
        
        # Use environment-specific parameters if available, fallback to default
        if [ ! -f "${{ env.PARAM_FILE }}" ]; then
          echo "Parameter file ${{ env.PARAM_FILE }} not found, using default infra/main.bicepparam"
          PARAM_FILE="infra/main.bicepparam"
        else
          PARAM_FILE="${{ env.PARAM_FILE }}"
        fi
        
        az deployment sub create \
          --template-file infra/main.bicep \
          --parameters $PARAM_FILE \
          --parameters environmentName=${{ env.ENVIRONMENT_NAME }} \
          --location ${{ env.AZURE_LOCATION }} \
          --name ${{ env.DEPLOYMENT_NAME }} \
          --verbose

    - name: Get deployment outputs
      id: deployment
      run: |
        # Get deployment outputs if any
        outputs=$(az deployment sub show \
          --name ${{ env.DEPLOYMENT_NAME }} \
          --query 'properties.outputs' \
          --output json 2>/dev/null || echo '{}')
        
        echo "DEPLOYMENT_OUTPUTS=$outputs" >> $GITHUB_ENV

    - name: Summary
      run: |
        echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Name:** ${{ env.DEPLOYMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Location:** ${{ env.AZURE_LOCATION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.DEPLOYMENT_OUTPUTS }}" != "{}" ]; then
          echo "**Deployment Outputs:**" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "${{ env.DEPLOYMENT_OUTPUTS }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi